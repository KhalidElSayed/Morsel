# -*- tab-width: 2; x-auto-expand-tabs: true; indent-tabs-mode: nil; coding: utf-8; mode: yaml; -*-

objects:
- id: root
  class: UIView                                     # You can use the class name or a defined synonym
  backgroundColor: 'rgb(100,200,150)'               # Morsel supports all CSS style colour definitions, see more examples later.
  size: [ 320, 416 ]                                # If we're using autolayout (which is on by default) this auto-generates constraints 

  subviews:
  - class: UILabel
    id: label1
    text: 'Hello world'                             # Sometimes text is just text
    font: { name: 'HelveticaNeue-Bold', size: 17 }  # Fonts are just simple dictionaries for now

  - class: UIView
    id: box1
    size: { width: 20, height: 20 }                 # Use a more verbose form if you want.
    backgroundColor: rgb(67%,88%,0%)                # You don't have to quote this if you don't want to

  - class: UIView
    id: box2
    size: [ 20, 30 ]
    backgroundColor: '#FF0000'                      # HTML style colours. Note you must quote this.

  - class: UIView
    id: box3
    size: [ 20, 40 ]
    backgroundColor: 'hsl(90,50%,100%)'             # Hue, saturation and brightness.

  - class: UIView
    id: box4
    size: [ 20, 60 ]
    backgroundColor: '#F00'                         # Short hex

  - class: UIView
    id: box5
    size: [ 20, 80 ]
    backgroundColor: '#0F0'                         

  - class: UIView
    id: box6
    size: [ 20, 100 ]
    backgroundColor: '#00F'                         

  constraints:
  - visual: 'H:|-10-[label1]-10-|'                  # Use standard visual constraint language. Refer to views by their id.
  - visual: 'V:|-10-[label1]'
  - visual: 'H:|-10-[box1]'
  - distribute-vertically: [ label1, box1 ]

  - align-top: [ box1, box2, box3, box4,		    # This builds constraints too!
      box5, box6 ]
  - distribute-horizontally: [ box1, box2, box3,
      box4, box5, box6 ]
